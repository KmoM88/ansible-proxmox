- name: Crear y configurar VM en Proxmox
  hosts: proxmox
  become: yes

  tasks:
  - name: Copiar script a proxmox host
    tags: copy_script
    ansible.builtin.copy:
      src: "{{ script_local_path }}"
      dest: "{{ script_proxmox_path }}"
      mode: '0755'

  - name: Copiar script al VM master
    tags: copy_script_master
    ansible.builtin.shell: >
      scp -o StrictHostKeyChecking=no {{ script_proxmox_path }} {{ ci_user }}@{{ bridge_ip }}.{{ vm_base_id }}:~/
      
  - name: Copiar script al VM rango
    tags: copy_script_range
    loop: "{{ range(vm_base_id, vm_base_id + total_vm) | list }}"
    loop_control:
      loop_var: vm_id
    ansible.builtin.shell: >
      scp -o StrictHostKeyChecking=no {{ script_proxmox_path }} {{ ci_user }}@{{ bridge_ip }}.{{ vm_id }}:~/

  - name: Ejecutar script dentro del VM master
    tags: run_script_master
    ansible.builtin.shell: ssh -o StrictHostKeyChecking=no {{ ci_user }}@{{ bridge_ip }}.{{ vm_base_id }} "sudo bash ~/install_basics.sh"
    register: script_result
    failed_when: script_result.rc != 0
    changed_when: script_result.rc == 0

  - name: Ejecutar script dentro del VM rango
    tags: run_script_range
    loop: "{{ range(vm_base_id, vm_base_id + total_vm) | list }}"
    loop_control:
      loop_var: vm_id
    ansible.builtin.shell: ssh -o StrictHostKeyChecking=no {{ ci_user }}@{{ bridge_ip }}.{{ vm_id }} "sudo bash ~/install_basics.sh"
    register: script_result
    failed_when: script_result.rc != 0
    changed_when: script_result.rc == 0

  - name: Reiniciar VM master
    tags: restart_vm_master
    ansible.builtin.shell: qm reboot {{ vm_base_id }}
  
  - name: Reiniciar VM rango
    tags: restart_vm_range
    loop: "{{ range(vm_base_id, vm_base_id + total_vm) | list }}"
    loop_control:
      loop_var: vm_id
    ansible.builtin.shell: qm reboot {{ vm_id }}

  - name: Limpiar VM master
    tags: cleanup_vm_master
    ansible.builtin.shell: >
      ssh -o StrictHostKeyChecking=no {{ ci_user }}@{{ bridge_ip }}.{{ vm_base_id }} "sudo apt-get clean && sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && sudo cloud-init clean && sudo rm -f /etc/ssh/ssh_host_* && sudo rm -f /var/lib/dhcp/* && sudo truncate -s 0 /etc/machine-id"

  - name: Apagar VM master
    tags: stop_vm_master
    ansible.builtin.shell: qm stop {{ vm_base_id }}
  
  - name: Apagar VM rango
    tags: stop_vm_range
    loop: "{{ range(vm_base_id, vm_base_id + total_vm) | list }}"
    loop_control:
      loop_var: vm_id
    ansible.builtin.shell: qm stop {{ vm_id }}

## Si se genera template no permite iniciarlo como master
  - name: Crear template desde VM master
    tags: template_vm_master
    ansible.builtin.shell: qm template {{ vm_base_id }}

  - name: Clonar VM rango
    tags: clone_vm_range
    loop: "{{ range(vm_base_id + 1, vm_base_id + total_vm) | list }}"
    loop_control:
      loop_var: vm_id
    ansible.builtin.shell: qm clone {{ vm_base_id }} {{ vm_id }} --name vm-{{ vm_id }} &&
      qm set {{ vm_id }} --ipconfig0 ip={{ bridge_ip }}.{{ vm_id }}/24,gw={{ bridge_gw }} &&
      qm set {{ vm_id }} --ciuser {{ ci_user }} --cipassword {{ ci_password }} &&
      qm set {{ vm_id }} --sshkeys {{ ssh_key_file }}

  - name: Iniciar VM rango
    tags: start_vm_range
    loop: "{{ range(vm_base_id , vm_base_id + total_vm) | list }}"
    loop_control:
      loop_var: vm_id
    ansible.builtin.shell: qm start {{ vm_id }}
